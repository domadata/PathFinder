{"version":3,"sources":["PathFinder/Algorithms/dijkstra.js","PathFinder/Grid/Grid.jsx","PathFinder/NavBar/NavBar.jsx","PathFinder/PathFinder.jsx","App.js","serviceWorker.js","index.js"],"names":["dijkstra","grid","startingPoint","finishPoint","visitedPath","unvisited","flat","distance","length","current","sortUnvisited","shift","isWall","isVisited","Infinity","push","updateUnvisited","row","col","sort","a","b","gridSizes","1","2","3","Speeds","Fast","Average","Slow","VerySlow","Options","createdGrid","finishedAnimation","Grid","props","state","createGrid","enableWalls","this","runningAlgorithm","algorithm","Visualize","gridSize","rows","columns","createUnvisited","setState","Dijkstra","prepareDijkstra","path","animateAlgorithm","speed","i","setTimeout","document","getElementById","className","target","id","onClick","map","rowIndex","key","object","colIndex","isStart","isFinish","onMouseOver","putWall","Component","Algorithms","defaultGridSize","NavBar","pickedAlgorithm","value","chosenSize","chosenAlgorithm","innerHTML","chosenSpeed","href","data-toggle","index","setAlgorithm","type","setSpeed","min","max","defaultValue","step","onInput","bind","PathFinder","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c416f69.chunk.js","sourcesContent":["//https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Algorithm\r\nexport function dijkstra(grid, startingPoint, finishPoint) {\r\n    const visitedPath = []; // store the visited order\r\n    const unvisited = grid.flat(); // 1. [..., Create a set of all the unvisited nodes called the unvisited set.]\r\n    startingPoint.distance = 0; // 2. Assign to every node a tentative distance value: set it to zero for our initial node <- and to infinity for all other nodes -> already done\r\n\r\n    while (unvisited.length && true) { //while we still have unvisited\r\n        const current = sortUnvisited(unvisited).shift(); // remove / take the object with the shortest distance\r\n        if (current.isWall) continue; // if it is a Wall we skip\r\n        if (current.isVisited) return visitedPath; // 5. [If the destination node has been marked visited..., then stop]\r\n        if (current.distance === Infinity) return visitedPath; //if the smallest tentative distance among the nodes in the unvisited set is infinity then stop\r\n        current.isVisited = true; // we mark it visited\r\n        visitedPath.push(current); // push it to our path\r\n        if (current === finishPoint) return visitedPath; // it is our finish point we stop\r\n        updateUnvisited(current, grid); // update the distance of the neighbour\r\n    }\r\n}\r\n\r\nfunction updateUnvisited(current, grid) {\r\n    const { row, col, distance } = current; // row, col and distance of our current\r\n    if (row < grid.length - 1) grid[row + 1][col].distance = distance + 1;\r\n    if (row > 0) grid[row - 1][col].distance = distance + 1;\r\n    if (col < grid[0].length - 1) grid[row][col + 1].distance = distance + 1; // since our grid is an array of an array grid.length are the numbers of rows grid[0].length are the number of columns\r\n    if (col > 0) grid[row][col - 1].distance = distance + 1;\r\n    // We set the distance of the neighbours of our current to the distance of our current + 1 since they are 1 block away...\r\n}\r\n\r\nfunction sortUnvisited(grid) {\r\n    return grid.sort((a, b) => a.distance > b.distance); // sort the objects by distance\r\n}","import React, { Component } from \"react\";\r\nimport { dijkstra } from \"../Algorithms/dijkstra\";\r\n\r\nconst START_ROW = 2;\r\nconst START_COL = 10;\r\nconst FINISH_ROW = 10;\r\nconst FINISH_COL = 29;\r\n\r\nconst gridSizes = {\r\n  1: {\r\n    col: 30,\r\n    row: 20\r\n  },\r\n  2: {\r\n    col: 40,\r\n    row: 20\r\n  },\r\n  3: {\r\n    col: 40,\r\n    row: 25\r\n  }\r\n};\r\n\r\nconst Speeds = {\r\n  Fast: 10,\r\n  Average: 40,\r\n  Slow: 80,\r\n  VerySlow: 1000\r\n};\r\n\r\nexport const Options = {\r\n  createdGrid: false,\r\n  finishedAnimation: false\r\n};\r\n\r\nexport default class Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      createGrid: false,\r\n      enableWalls: false,\r\n      finishedAnimation: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { runningAlgorithm, algorithm } = this.props;\r\n    if (runningAlgorithm) {\r\n      Options.finishedAnimation = false;\r\n      this.Visualize(algorithm);\r\n    }\r\n  }\r\n\r\n  createGrid() {\r\n    const { gridSize } = this.props;\r\n    const rows = [];\r\n    for (let row = 0; row < gridSizes[gridSize].row; row++) {\r\n      const columns = [];\r\n      for (let col = 0; col < gridSizes[gridSize].col; col++) {\r\n        columns.push(createUnvisited(row, col, gridSize));\r\n      }\r\n      rows.push(columns);\r\n    }\r\n\r\n    this.setState({ grid: rows, createGrid: true });\r\n    Options.createdGrid = true;\r\n  }\r\n\r\n  Visualize(algorithm) {\r\n    const algorithmFunctions = {\r\n      Dijkstra: () => {\r\n        this.prepareDijkstra();\r\n      }\r\n    };\r\n\r\n    algorithmFunctions[algorithm]();\r\n  }\r\n\r\n  async prepareDijkstra() {\r\n    const { grid } = this.state;\r\n    const startingPoint = grid[START_ROW][START_COL];\r\n    const finishPoint = grid[FINISH_ROW][FINISH_COL];\r\n    const path = dijkstra(grid, startingPoint, finishPoint);\r\n\r\n    this.animateAlgorithm(path);\r\n  }\r\n\r\n  animateAlgorithm(path) {\r\n    const { speed } = this.props;\r\n    for (let i = 0; i <= path.length; i++) {\r\n      setTimeout(() => {\r\n        if (i === path.length) {\r\n          this.setState({ finishedAnimation: true });\r\n          Options.finishedAnimation = true;\r\n          return; // or we will get path[i] is undefined\r\n        }\r\n        document.getElementById(`${path[i].row}-${path[i].col}`).className =\r\n          path[i].row === START_ROW && path[i].col === START_COL\r\n            ? \"visited start\"\r\n            : path[i].row === FINISH_ROW && path[i].col === FINISH_COL\r\n            ? \"visited target\"\r\n            : \"visited\";\r\n      }, i * Speeds[speed]);\r\n    }\r\n  }\r\n\r\n  putWall(row, col) {\r\n    const { grid, enableWalls } = this.state;\r\n    const target = document.getElementById(`${row}-${col}`);\r\n    if (!this.props.runningAlgorithm && enableWalls) {\r\n      if (target.className === \"unvisited\") {\r\n        target.className = \"wall\";\r\n        grid[row][col].isWall = true;\r\n      } else if (target.className === \"wall\") {\r\n        target.className = \"unvisited\";\r\n        grid[row][col].isWall = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, createGrid, enableWalls, finishedAnimation } = this.state;\r\n    const { gridSize, algorithm } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"Grid\">\r\n          {!createGrid && (\r\n            <div id=\"Info\">\r\n              <h4>\r\n                Grid Size : {gridSizes[gridSize].row}x{gridSizes[gridSize].col},\r\n                use the slidebar to change it\r\n              </h4>\r\n              <button\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.createGrid()}\r\n              >\r\n                Create Grid\r\n              </button>\r\n            </div>\r\n          )}\r\n          {createGrid && (\r\n            <div id=\"Legend\">\r\n              <ul>\r\n                <li>\r\n                  <div className=\"start\"></div> Start\r\n                </li>\r\n                <li>\r\n                  <div className=\"target\"></div> Target\r\n                </li>\r\n                <li>\r\n                  <div className=\"wall\"></div> Wall\r\n                </li>\r\n                <li>\r\n                  <div className=\"unvisited\"></div> Unvisited\r\n                </li>\r\n                <li>\r\n                  <div className=\"visited\"></div> Visited\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n          <table>\r\n            <tbody>\r\n              {grid.map((row, rowIndex) => {\r\n                return (\r\n                  <tr id={rowIndex} key={rowIndex}>\r\n                    {row.map((object, colIndex) => {\r\n                      return (\r\n                        <td\r\n                          id={`${object.row}-${object.col}`}\r\n                          className={\r\n                            object.isStart\r\n                              ? \"start\"\r\n                              : object.isFinish\r\n                              ? \"target\"\r\n                              : \"unvisited\"\r\n                          }\r\n                          onMouseOver={() =>\r\n                            this.putWall(object.row, object.col)\r\n                          }\r\n                          onClick={() =>\r\n                            this.setState({ enableWalls: !enableWalls })\r\n                          }\r\n                          key={colIndex}\r\n                        ></td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          {finishedAnimation && algorithm === \"Dijkstra\" && (\r\n            <div id=\"PathDistance\">\r\n              <h4>\r\n                Shortest distance from Start to Target :{\" \"}\r\n                {grid[FINISH_ROW][FINISH_COL].distance}\r\n              </h4>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst createUnvisited = (row, col, gridSize) => {\r\n  return {\r\n    row, //keep track of were we are\r\n    col, // ^\r\n    isStart: row === START_ROW && col === START_COL, // start pos\r\n    isFinish: row === FINISH_ROW && col === FINISH_COL, // finish pos\r\n    distance: Infinity, // 2. assign to every node a tentative distance value: set it to zero for our initial node and to infinity for all other nodes.\r\n    isVisited: false, // 1. Mark all nodes unvisited.\r\n    isWall: false // if its a wall we will need to skip it\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Grid, { Options } from \"../Grid/Grid\";\r\n\r\nconst Speeds = [\"Fast\", \"Average\", \"Slow\", \"VerySlow\"];\r\nconst Algorithms = [\"Dijkstra\"];\r\nconst minGridSize = 1;\r\nconst maxGridSize = 3;\r\nconst defaultGridSize = 2;\r\n\r\nexport default class NavBar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      speed: Speeds[0],\r\n      algorithm: null,\r\n      pickedAlgorithm: false,\r\n      runningAlgorithm: false,\r\n      gridSize: defaultGridSize\r\n    };\r\n  }\r\n\r\n  onInput() {\r\n    const input = document.getElementById(\"customRange1\");\r\n    const gridSize = input.value;\r\n    this.setState({ gridSize, chosenSize: !this.state.chosenSize });\r\n  }\r\n\r\n  setAlgorithm(chosenAlgorithm) {\r\n    const algorithm = chosenAlgorithm.target.innerHTML;\r\n    {\r\n      !this.state.runningAlgorithm &&\r\n        this.setState({ algorithm, pickedAlgorithm: true });\r\n    }\r\n  }\r\n\r\n  setSpeed(chosenSpeed) {\r\n    const speed = chosenSpeed.target.innerHTML;\r\n    {\r\n      !this.state.runningAlgorithm && this.setState({ speed });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      speed,\r\n      algorithm,\r\n      pickedAlgorithm,\r\n      runningAlgorithm,\r\n      gridSize\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <nav className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-primary\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            Path Search\r\n          </a>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  data-toggle=\"dropdown\"\r\n                  href=\"#\"\r\n                >\r\n                  Algorithm : {algorithm}\r\n                </a>\r\n                <div className=\"dropdown-menu\">\r\n                  {Algorithms.map((algorithm, index) => {\r\n                    return (\r\n                      <a\r\n                        className=\"dropdown-item\"\r\n                        href=\"#\"\r\n                        key={index}\r\n                        onClick={chosenAlgorithm =>\r\n                          this.setAlgorithm(chosenAlgorithm)\r\n                        }\r\n                        key={index}\r\n                      >\r\n                        {algorithm}\r\n                      </a>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  data-toggle=\"dropdown\"\r\n                  href=\"#\"\r\n                >\r\n                  Speed : {speed}{\" \"}\r\n                  {speed === \"VerySlow\"\r\n                    ? \"| used for debugging not recommended\"\r\n                    : \"\"}\r\n                </a>\r\n                <div className=\"dropdown-menu\">\r\n                  {Speeds.map((type, index) => {\r\n                    return (\r\n                      <a\r\n                        className=\"dropdown-item\"\r\n                        href=\"#\"\r\n                        key={index}\r\n                        onClick={chosenSpeed => this.setSpeed(chosenSpeed)}\r\n                        key={index}\r\n                      >\r\n                        {type}\r\n                      </a>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </li>\r\n              <button\r\n                type=\"button\"\r\n                className={\r\n                  !runningAlgorithm ? `btn btn-success` : `btn btn-danger`\r\n                }\r\n                onClick={() => {\r\n                  pickedAlgorithm &&\r\n                    Options.createdGrid &&\r\n                    this.setState({ algorithm, runningAlgorithm: true });\r\n                }}\r\n              >\r\n                {!pickedAlgorithm\r\n                  ? `Pick an Algorithm`\r\n                  : `Visualize ${algorithm}`}\r\n              </button>\r\n              <fieldset className=\"form-group\">\r\n                <input\r\n                  type=\"range\"\r\n                  className=\"custom-range\"\r\n                  id=\"customRange1\"\r\n                  min={minGridSize}\r\n                  max={maxGridSize}\r\n                  defaultValue={defaultGridSize}\r\n                  step={!runningAlgorithm ? \"1\" : \"0\"}\r\n                  onInput={!runningAlgorithm && this.onInput.bind(this)}\r\n                />\r\n              </fieldset>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <Grid\r\n          speed={speed}\r\n          gridSize={gridSize}\r\n          algorithm={algorithm}\r\n          runningAlgorithm={runningAlgorithm}\r\n        ></Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport \"./PathFinder.css\";\r\nimport \"bootstrap/dist/js/bootstrap.min.js\";\r\n\r\nexport default class PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return <NavBar/>;\r\n  }\r\n}\r\n","import React from 'react';\nimport PathFinder from './PathFinder/PathFinder';\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\n\nfunction App() {\n  return <PathFinder />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}